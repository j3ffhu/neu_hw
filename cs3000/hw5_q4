
modified dijstra: pick max weght first to construct a path
return min from path





// dijkstraModified
function BOTTLENECK(G, W, S, T)
    for each vertex V in G
        bandwidth[V] <- 0
        previous[V] <- NULL
    S to  Queue Q
    bandwidth[S] <- INF
    while Q IS NOT EMPTY
        U <- Extract  from Q
        for each unvisited neighbour V of U
            tempBandwidth <-  min( W(U, V), bandwidth[U] )
            if tempBandwidth > distance[V]
                distance[V] <- tempBandwidth
                previous[V] <- U
    return bandwidth[T] 







 function Dijkstra(Graph, source, target)
        // Initialize  to all nodes as 0: map
        // except source to max 
        banwidth <- node banwidth map

        // track path
        parent: map node to parent in path
        add to parent : source -> null 

        // Initialize an empty set of visited nodes 
        visited <- empty set

        // start with source
        visited.add   source 

        //Relaxation: relax its neightbor by
       EdgeRelaxation(Graph, source)

   // Loop until target hit and path found
   while target not visited :
       choose v from bandwidth that is not visited, and has max value
       EdgeRelaxation(Graph, v)
       add v to visited
    // now found path, backtrack parent, find path source,  v1 , v2.... target:
     result <- find the minimum value of all nodes:  v1 .... target: skip source [max valude]
   return  result

 function EdgeRelaxation(Graph, v)
        for each edge e(v, n) starting v
             min <- banwidth[v], w(e)
             if  banwidth[n] < min  
                    parent[n] <- s
                    banwidth[n] <- min

c: modified dijstar, take from it .. 
