
// You can assume the graph is represented by an adjacency list and your algorithm should
run in O(n + |S|) time.

// input AdjList representation of G
Funncction Soccer(G(AdjList[] list))
    hour  <- 0  : total hour
    count <- 0  : number of games to play next hour 

    /// build indegree - initialze 0, size of nodes
    indegree[v] = 0
    for l in list
       for each edge(u,v)
           indegree[v] <- indegree[v] + 1

 
    Q ← enqueue of all nodes v ∈ V where indegree[v] = 0

    while Q is not empty do
        hour <- hour + 1
        count <- Q size
        while 0 < count do
            remove  node v from Q head
            count = count - 1
            for each edge(v, u) of AdjList[v]
                  indegree[u] <- indegree[u] + 1
                  insert u into Q if indegree reaches 0

    return hour

 

a 
Greedy - each hour: 
1 find all games without contraits  
2 remove constraints for each game played 
3 repeat step 1

b. abv

c . sample grahp: hr -> games
1- 1
2 -  2 4
3 - 3 6
4 5

total 4 hrs 

d. each node and edge is vistived once O(v+e)

