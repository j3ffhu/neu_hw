

a

// https://en.wikipedia.org/wiki/Floyd%E2%80%93Warshall_algorithm



// call dijkstra on every node, update rank 
Function FINDHIGHEST(G, n):
   rankRet[V] <- 0 for array of size n
   For S in 1 to n
     rank[], previous[] = dijkstra(G, S) 
     For u in  previous[]  
        if rank[u] >  rankRet[u]
            rankRet[u] <- distance[u]  
 

function dijkstra(G, S)
    for each vertex V in G
        rank[V] <- infinite
        previous[V] <- NULL
    add S to  Queue Q
    distance[S] <- 0
	
    while Q IS NOT EMPTY
        U <- Extract  from Q
        for each unvisited neighbour V of U
             // each follow : weight 1
            alt <- rank[U] + 1
            if tempDistance < distance[V]
                rank[V] <- alt
                previous[V] <- U
    return rank[], previous[]




define each follow v1 -> v2 and directed edge e(u1, u2), weight 1,  - G(V, E)
run Floydâ€“Warshall algo on all pair shortest path on G
initial S[u] rank all 0
for each shortest path p(u1... ux), if length is greater than S[x}, update its value to length

b. (can you write something)

c. v3 
