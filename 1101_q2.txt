// idea is to find max length of increse or desceasing sequence
// fill in it , repeat rest of hourse
Function PARTIALPUMPKIN(C):

   // start with first house, find max sequence of increase or descr candy
    // 4 5 5  8 9 9  3 2  1 1 
    // first loop ASC 4 5 5  8 9 9, unique count 4 : fill 1 2 2 3 4 4
    // starting 3 2  1 1  DESC: unique count 
 
    
  // base
   if C lenthgh = 1
      return Array[1]
    
   inital empty array P[], size of n
    
   
    start = 1
    // DESC, ASC, UNKNOWN/start
    order = 'UNKNOWN'
    
    count = 1
    
  // starting 2nd, find sequence, repeat...
   for (i = 2 to n)
       //  check current trend
       // equal, keep goging 
       // reversal - build array, call subproblem
       
        if C[i] > C[i-1]  order = 'UNKNOWN'  
           order = 'ASC'
        else if C[i] > C[i-1]  and  order = 'ASC'  
            count = count +1
        else if C[i] > C[i-1]  
          
           // reset
           // fill in start to i: starting count
           // ASC, start 1
           P[start] = 1
           for j = start+1 to n
               if C[j] >  C[j-1] 
                   P[j] =  p[j-1] +1
               else 
                  P[j] =  p[j-1] 
             
           // look for asc next
            order = 'DESC'
            start = i
            count = 1
       if C[i] < C[i-1]  order = 'UNKNOWN'  
	  order = 'DESC'
       else if C[i]  < C[i-1]  order =   'DESC' 
	   count = count +1
       else if C[i] < C[i-1]  

	  // reset
	  // fill in start to i: starting count
	  // ASC, start 1
	  P[start] = 1
	  for j = start+1 to n
	      if C[j] <  C[j-1] 
		  P[j] =  p[j-1] +1
	      else 
		 P[j] =  p[j-1] 

           // look for ASC next
	   order = 'ASC'
	   start = i

      // adjust edge case where two sequence overlapping
      // edge case
	// 4 5 10 9  6 6  3 2 1
	// 1 2  3  5  4 4  3 2 1

	// need adjust one more round
	// 4 5 10 9  6 6  3 2 1
	// 1 2  6  5  4 4  3 2 1
	       ^
      for (i = 2 to p len -1 ) 
           // if candy more than both neighbor, get max + 1
           if P(i) >   P(i-1 )  and P(i) >   P(i +  )
                P(i) = Max(P(i-1 ), P(i+1 )) + 1

       return P       
            
